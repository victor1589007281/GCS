--disable_query_log
--source suite/spider/inc/install_spider.inc
SET GLOBAL spider_quick_mode=0;
SHOW GLOBAL VARIABLES LIKE 'spider_quick_mode';
CREATE DATABASE IF NOT EXISTS `spider_test`;
USE spider_test;
CREATE TABLE IF NOT EXISTS `t1`(
        `id` bigint(20) NOT NULL, `name` varchar(20) NOT NULL, PRIMARY KEY (`id`)
) ENGINE=SPIDER DEFAULT CHARSET=latin1 CONNECTION=' table "t1", user "root", password "root"'
/*!50100 PARTITION BY RANGE(id)
(PARTITION pt1 VALUES LESS THAN(10) COMMENT = 'host "10.132.74.40", port "20001"' ENGINE = SPIDER,
PARTITION pt2 VALUES LESS THAN MAXVALUE COMMENT = 'host "10.132.74.40", port "20002"' ENGINE = SPIDER) */;

CREATE TABLE IF NOT EXISTS `t2`(
        `id` bigint(20) NOT NULL,
        `name` varchar(20) NOT NULL,
        PRIMARY KEY (`id`)
) ENGINE=SPIDER DEFAULT CHARSET=latin1 CONNECTION=' table "t2", user "root", password "root"'
/*!50100 PARTITION BY RANGE(id)
(PARTITION pt1 VALUES LESS THAN(10) COMMENT = 'host "10.132.74.40", port "20001"' ENGINE = SPIDER,
PARTITION pt2 VALUES LESS THAN MAXVALUE COMMENT = 'host "10.132.74.40", port "20002"' ENGINE = SPIDER) */;

CREATE TABLE IF NOT EXISTS `t3` (
        `id` bigint(20) NOT NULL,
        `s_id` bigint(20) NOT NULL,
        `c_id` bigint(20) NOT NULL,
        PRIMARY KEY (`id`)
) ENGINE=SPIDER DEFAULT CHARSET=latin1 CONNECTION=' table "t3", user "root", password "root"'
/*!50100 PARTITION BY RANGE(id)
(PARTITION pt1 VALUES LESS THAN(10) COMMENT = 'host "10.132.74.40", port "20001"' ENGINE = SPIDER,
PARTITION pt2 VALUES LESS THAN MAXVALUE COMMENT = 'host "10.132.74.40", port "20002"' ENGINE = SPIDER) */; CREATE INDEX IDX_T1_NAME ON t1(name);
CREATE INDEX IDX_T2_NAME ON t2(name);
CREATE INDEX IDX_T3_S ON t3(s_id);
CREATE INDEX IDX_T3_C ON t3(c_id);

DROP PROCEDURE IF EXISTS spider_test.test_init;
DELIMITER //;
CREATE PROCEDURE test_init()
BEGIN
DECLARE i INT;
DECLARE max INT;
SET i=1;
SET max=10;
WHILE i < max DO
  INSERT INTO t1(id, name) VALUES (i, CONCAT('stu', i));
  SET i=i+1;
END WHILE;
SET i=1;
WHILE i < max/2 DO
  INSERT INTO t2(id, name) VALUES (i, CONCAT('course', i));
  SET i=i+1;
END WHILE;
INSERT INTO t3(id,s_id,c_id) VALUES (1,1,3);
INSERT INTO t3(id,s_id,c_id) VALUES (2,9,5);
INSERT INTO t3(id,s_id,c_id) VALUES (4,8,3);
INSERT INTO t3(id,s_id,c_id) VALUES (5,3,4);
INSERT INTO t3(id,s_id,c_id) VALUES (6,4,1);
INSERT INTO t3(id,s_id,c_id) VALUES (7,1,2);
INSERT INTO t3(id,s_id,c_id) VALUES (8,1,4);
INSERT INTO t3(id,s_id,c_id) VALUES (9,9,4);
END//
DELIMITER ;//
CALL test_init;

SELECT id, name FROM t1 WHERE id < 10 ORDER BY ID ASC; 
SELECT id, name FROM t2 WHERE id < 10 ORDER BY ID ASC;
SELECT id, s_id, c_id FROM t3 WHERE id < 10 ORDER BY ID ASC;
SELECT id, name FROM t1 WHERE name LIKE 'course1%' LIMIT 10;
SELECT id, name FROM t2 WHERE name LIKE 'stu%' LIMIT 10;
## join
SELECT t1.id AS s_id, t1.name AS s_name, t3.c_id AS c_id FROM t1 INNER JOIN t3 ON t1.id=t3.s_id ORDER BY s_id;
SELECT t1.id AS s_id, t1.name AS s_name, t3.c_id AS c_id FROM t1 CROSS JOIN t3 ON t1.id=t3.s_id ORDER BY s_id;
SELECT t1.id AS s_id, t1.name AS s_name, t3.c_id AS c_id FROM t1 LEFT JOIN t3 ON t1.id=t3.s_id ORDER BY s_id;
SELECT t1.id AS s_id, t1.name AS s_name, t3.c_id AS c_id FROM t1 RIGHT JOIN t3 ON t1.id=t3.s_id ORDER BY s_id;
SELECT t1.id AS s_id, t1.name AS s_name, t2.id AS c_id, t2.name AS c_name FROM t1, t2, t3 WHERE t3.s_id=1 and t1.id=t3.s_id and t2.id=t3.c_id; 
SELECT t1.id AS s_id, t1.name AS s_name, GROUP_CONCAT(t2.name) AS selected_courses FROM t1, t2, t3 WHERE t1.id=t3.s_id and t2.id=t3.c_id GROUP BY s_id ORDER BY s_id;
SELECT t1.id AS s_id, t1.name AS s_name, GROUP_CONCAT(t2.name) AS selected_courses, COUNT(s_id) AS course_count FROM t1, t2, t3 WHERE t1.id=t3.s_id and t2.id=t3.c_id GROUP BY s_id ORDER BY s_id;
SELECT t1.id AS s_id, t1.name AS s_name, GROUP_CONCAT(t2.name) AS selected_courses, COUNT(s_id) AS course_count FROM t1, t2, t3 WHERE t1.id=t3.s_id and t2.id=t3.c_id GROUP BY s_id HAVING course_count>1 ORDER BY s_id;
#transaction
BEGIN;
SELECT * FROM t1 WHERE id > 10;
INSERT INTO t1(id, name) VALUES(11, 'harry');
SELECT * FROM t1 WHERE id > 10;
COMMIT;
SELECT * FROM t1 WHERE id > 10;
BEGIN;
DELETE FROM t1 WHERE id > 10;
SELECT * FROM t1 WHERE id > 10;
ROLLBACK;
SELECT * FROM t1 WHERE id > 10;
DELETE FROM t1 WHERE id > 10;
SELECT * FROM t1 WHERE id > 10;

DELETE FROM t1;
DELETE FROM t2;
DELETE FROM t3;

#DROP PROCEDURE IF EXISTS spider_test.test_init;
#DELIMITER //;
#CREATE PROCEDURE test_init()
#BEGIN
#DECLARE i INT;
#DECLARE max INT;
#SET i=1;
#SET max=100000;
#WHILE i < max DO
#  INSERT INTO t1(id, name) VALUES (i, CONCAT('stu', i));
#  SET i=i+1;
#END WHILE;
#SET i=1;
#WHILE i < max/2 DO
#  INSERT INTO t2(id, name) VALUES (i, CONCAT('course', i)); 
#  SET i=i+1;
#END WHILE;
#SET i=1;
#WHILE i < max DO
#  INSERT INTO t3(id, s_id, c_id) VALUES(i, FLOOR(1+RAND()*(max)), FLOOR(1+RAND()*(max/2)));
#  SET i=i+1;
#END WHILE;
#END//
#DELIMITER ;//
#CALL test_init;


DROP PROCEDURE IF EXISTS spider_test.test_init;
#DELETE FROM t1;
#DELETE FROM t2;
#DELETE FROM t3;
#DROP TABLE IF EXISTS t1,t2,t3;
#DROP DATABASE IF EXISTS spider_test;
--enable_query_log
